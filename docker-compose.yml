version: '3'

services:
  db:
    image: postgres
    env_file:
      - database/database.env

  mq:
    image: rabbitmq:management-alpine
    env_file:
      - message-queue/message_queue.env
    ports:
      - ${MQ_PORT}:${MQ_PORT}
      - ${MQ_DEV_PORT}:${MQ_DEV_PORT}


  notifications:
    env_file:
      - notifications/notifications.env

    build:
      context: notifications
      dockerfile: Dockerfile

    depends_on:
      - mq

    ports:
      - ${NOTIFICATIONS_PORT}:${NOTIFICATIONS_PORT}

    command: >
      sh -c "utils/wait-for.sh mq:$MQ_PORT -t 0 &&
             ./notifications"


  auth:
    env_file:
      - .env
      - database/database.env
      - auth/auth.env

    build:
      context: auth
      dockerfile: Dockerfile

    depends_on:
      - db
      - mq

    command: >
      sh -c "utils/wait-for.sh db:$DB_PORT -t 0 &&
             utils/wait-for.sh mq:$MQ_PORT -t 0 &&
             python manage.py makemigrations &&
             python manage.py migrate &&
             python manage.py runserver 0.0.0.0:$AUTH_PORT"

    ports:
      - ${AUTH_PORT}:${AUTH_PORT}

    volumes:
      - ./auth:/auth


  online-store:
    env_file:
      - .env
      - database/database.env
      - online-store/onlinestore.env

    build:
      context: online-store
      dockerfile: Dockerfile

    depends_on:
      - db
      - auth

    command: >
      sh -c "utils/wait-for.sh auth:$AUTH_PORT &&
             python manage.py makemigrations &&
             python manage.py migrate &&
             python manage.py runserver 0.0.0.0:$ONLINE_STORE_PORT"

    ports:
      - ${ONLINE_STORE_PORT}:${ONLINE_STORE_PORT}

    volumes:
      - ./online-store:/online-store
