version: "3"

services:
  db:
    image: postgres
    env_file:
      - database/database.env

  redis:
    image: redis:alpine
    env_file:
      - upload/upload.env

  mq:
    image: rabbitmq:management-alpine
    env_file:
      - message-queue/message_queue.env
    ports:
      - ${MQ_PORT}:${MQ_PORT}
      - ${MQ_DEV_PORT}:${MQ_DEV_PORT}

  mail:
    image: tvial/docker-mailserver:latest
    hostname: ${MAIL_HOST}
    domainname: ${MAIL_DOMAIN}
    env_file:
      - .env
      - mail/mail.env
    ports:
      - "25:25"
      - "143:143"
      - "587:587"
      - "993:993"
    volumes:
      - ./mail/data:/var/mail
      - ./mail/state:/var/mail-state
      - ./mail/logs:/var/log/mail
      - ./mail/config/:/tmp/docker-mailserver/
    cap_add:
      - NET_ADMIN
      - SYS_PTRACE

  notifications:
    env_file:
      - .env
      - mail/mail.env
      - message-queue/message_queue.env
      - notifications/notifications.env
    build:
      context: notifications
      dockerfile: Dockerfile
    depends_on:
      - mail
      - mq
    ports:
      - ${NOTIFICATIONS_PORT}:${NOTIFICATIONS_PORT}
    command: >
      sh -c "utils/wait-for.sh $MQ_HOST:$MQ_PORT -t 0 &&
             ./notifications"

  auth:
    env_file:
      - .env
      - database/database.env
      - notifications/notifications.env
      - auth/auth.env
    build:
      context: .
      dockerfile: auth/Dockerfile
    depends_on:
      - db
      - mq
    command: >
      sh -c "utils/wait-for.sh $DB_HOST:$DB_PORT -t 0 &&
             utils/wait-for.sh $MQ_HOST:$MQ_PORT -t 0 &&
             python manage.py makemigrations &&
             python manage.py migrate &&
             python manage.py runserver 0.0.0.0:$AUTH_PORT"
    ports:
      - ${AUTH_PORT}:${AUTH_PORT}

  auth-grpc:
    env_file:
      - .env
      - database/database.env
      - auth/auth.env
    build:
      context: .
      dockerfile: auth/Dockerfile
    depends_on:
      - db
      - auth
    environment:
      - AUTH_GRPC_MODE=1
    # TODO(TmLev): remove --dev after debugging
    command: >
      sh -c "utils/wait-for.sh $DB_HOST:$DB_PORT &&
             utils/wait-for.sh $AUTH_HOST:$AUTH_PORT -t 0 &&
             python manage.py makemigrations &&
             python manage.py migrate &&
             python manage.py grpcrunserver --dev 0.0.0.0:$AUTH_GRPC_PORT"
    ports:
      - ${AUTH_GRPC_PORT}:${AUTH_GRPC_PORT}

  online-store:
    env_file:
      - .env
      - database/database.env
      - online-store/onlinestore.env
    build:
      context: .
      dockerfile: online-store/Dockerfile
    depends_on:
      - db
      - auth-grpc
    command: >
      sh -c "utils/wait-for.sh $DB_HOST:$DB_PORT &&
             utils/wait-for.sh $AUTH_GRPC_HOST:$AUTH_GRPC_PORT &&
             python manage.py makemigrations &&
             python manage.py migrate &&
             python manage.py runserver 0.0.0.0:$ONLINE_STORE_PORT"
    ports:
      - ${ONLINE_STORE_PORT}:${ONLINE_STORE_PORT}

  upload:
    env_file:
      - .env
      - database/database.env
      - upload/upload.env
    build:
      context: .
      dockerfile: upload/Dockerfile
    depends_on:
      - db
      - auth-grpc
    command: >
      sh -c "utils/wait-for.sh $DB_HOST:$DB_PORT &&
             utils/wait-for.sh $AUTH_GRPC_HOST:$AUTH_GRPC_PORT &&
             python manage.py makemigrations &&
             python manage.py migrate &&
             python manage.py runserver 0.0.0.0:$UPLOAD_PORT"
    ports:
      - ${UPLOAD_PORT}:${UPLOAD_PORT}
    volumes:
      - ./upload/files:/tmp/files

  upload-q-cluster:
    env_file:
      - .env
      - database/database.env
      - upload/upload.env
      - import/import.env
    build:
      context: .
      dockerfile: upload/Dockerfile
    depends_on:
      - db
      - redis
      - mq
    command: >
      sh -c "utils/wait-for.sh $DB_HOST:$DB_PORT &&
             utils/wait-for.sh $REDIS_HOST:$REDIS_PORT &&
             utils/wait-for.sh $MQ_HOST:$MQ_PORT &&
             python manage.py makemigrations &&
             python manage.py migrate &&
             python manage.py qcluster"
    ports:
      - ${UPLOAD_Q_CLUSTER_PORT}:${UPLOAD_Q_CLUSTER_PORT}
    volumes:
      - ./upload/files:/tmp/files
